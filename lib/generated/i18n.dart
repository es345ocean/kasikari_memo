
import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

//This file is automatically generated. DO NOT EDIT, all your changes would be lost.

class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
      const GeneratedLocalizationsDelegate();

  static S of(BuildContext context) =>
      Localizations.of<S>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get Registration_borrow => "Borrow";
  String get Registration_lend => "Lend";
  String get Registration_loan_borrow => "Things I borrow";
  String get Registration_loan_lend => "Things I lend";
  String get Registration_name_borrow => "FROM WHOM";
  String get Registration_name_lend => "TO WHOM";
  String get borrow => "BORROW";
  String get cancel => "Cancel";
  String get change_deadline => "Change Deadline";
  String get dialog => "User Info";
  String get edit => "Edit";
  String get fail_connect_firebase => "Failed to connect to Firebase";
  String get fail_login_firebase => "Failed to login to Firebase";
  String get fail_register_firebase => "Failed to register to Firebase";
  String get input_title => "Registration";
  String get lend => "LEND";
  String get login => "Login";
  String get login_register => "Login/Register";
  String get logout => "Logout";
  String get register => "Register";
  String get title => "Kasikari-memo";
  String get validate_loan => "Please enter your loan";
  String get validate_mail => "Please enter your email";
  String get validate_name => "Please enter your name";
  String get validate_password_null_empty => "Please enter password";
  String get validate_password_short_length => "More than 6 characters";
  String deadline(String time) => "Deadline:$time";
  String login_user(String mail) => "Login User : $mail";
  String who(String name) => "Who:$name";
}

class ja extends S {
  const ja();

   @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "キャンセル";
  @override
  String get fail_connect_firebase => "Firebaseとの接続に失敗しました。";
  @override
  String get Registration_loan_lend => "貸したもの";
  @override
  String get title => "かしかりメモ";
  @override
  String get login => "ログイン";
  @override
  String get fail_login_firebase => "Firebaseへのログインに失敗しました。";
  @override
  String get login_register => "ログイン/登録ダイアログ";
  @override
  String get validate_loan => "借りたもの、貸したものは必須入力項目です";
  @override
  String get change_deadline => "締め切り日変更";
  @override
  String get dialog => "ユーザ情報";
  @override
  String get input_title => "貸し借り入力";
  @override
  String get Registration_lend => "貸した";
  @override
  String get lend => "貸";
  @override
  String get Registration_name_borrow => "借りた相手";
  @override
  String get validate_name => "名前の入力は必須です。";
  @override
  String get edit => "編集";
  @override
  String get Registration_name_lend => "貸した相手";
  @override
  String get validate_password_null_empty => "パスワードは必須入力項目です";
  @override
  String get validate_password_short_length => "パスワードは6文字以上です";
  @override
  String get Registration_borrow => "借りた";
  @override
  String get fail_register_firebase => "Firebaseへの登録に失敗しました。";
  @override
  String get Registration_loan_borrow => "借りたもの";
  @override
  String get validate_mail => "Emailは必須入力項目です";
  @override
  String get borrow => "借";
  @override
  String get register => "登録";
  @override
  String deadline(String time) => "締切日:$time";
  @override
  String login_user(String mail) => "ログイン名 : $mail";
  @override
  String who(String name) => "相手:$name";
}

class en extends S {
  const en();
}


class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[

      const Locale("ja", ""),
      const Locale("en", ""),

    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      final Locale languageLocale = new Locale(locale.languageCode, "");
      if (supported.contains(locale))
        return locale;
      else if (supported.contains(languageLocale))
        return languageLocale;
      else {
        final Locale fallbackLocale = fallback ?? supported.first;
        return fallbackLocale;
      }
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    final String lang = getLang(locale);
    switch (lang) {

      case "ja":
        return new SynchronousFuture<WidgetsLocalizations>(const ja());
      case "en":
        return new SynchronousFuture<WidgetsLocalizations>(const en());

      default:
        return new SynchronousFuture<WidgetsLocalizations>(const S());
    }
  }

  @override
  bool isSupported(Locale locale) => supportedLocales.contains(locale);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;
}

String getLang(Locale l) => l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
